## Intro

Ladies in gentlemen, it is the second decade of the second millenium and we are still kicking around the same 2D interface we got two decades ago in the original Mac. Sure, Apple debuted some 10.7 apps that added a couple more 3D flourishes, and Microsoft has had that [Flip 3D](http://windows.microsoft.com/en-US/windows-vista/Using-Windows-Flip-3D) for a while. But c'mon, 2011 is in a couple weeks. We should be zipping around the Metaverse in super-sonic motorbikes , as Hiro Protagonist did in Neal Stephenson's _Snow Crash._ 

While the capability of rendering complex 3D environments has been present for years, the digital interfaces of today predominately exist in a two dimensional environment. Largely this is due to the constraints of the physical interfaces themselves. The monitor has width and height. The mouse moves left, right, up, down. Digital interfaces are ill equipped to interact with in three dimensions. After decades of development, even the biggest and best native software developers have only managed to dip their flattened toes in a pool of width, height, and _depth._  We web designers ought to consider why bother at all developing interfaces that take advantage of 3D space.

## Rationale

While 3D transforms might be sexy and cool, we owe it to our users to ask what can they benefit from them. Take the [Snow Stack](http://www.satine.org/archives/2009/07/11/snow-stack-is-here/) demo. While visually engaging, I don't see any inherent utility of a completely 3D interface. The users interface is 2D. CSS was developed for 2D documents. Creating 3D environments, while it may be achievable, just doesn't make sense for our users.

The entire application does not have to take advantage of 3D, but there is plenty of opportunity to use 3D transforms _in between_ the interface, via transitions. Take for instance the Weather App on the iPhone. The application uses two views, a details view of the weather, and a editable view of options for selecting locations. Switching between these two views is done with a 3D flip transition. This affords the user that interface has but two views, and only two views, as the exist on two sides of the same plane.

Also consider image cycle interfaces. What cues tip-off the user that the advancing from the last slide will re-start the cycle at the first? A better paradigm can be used with a 3D transform, where the slides are places side by side one another _in a circle in the third dimension_. In that arrangement, the last slide logically does come before the first.

Not only can we use 3D transforms to create more visually impressive applications, but we can also use them to solve dilemmas. 

## Current Support Environment

[The CSS3 spec for 3D transforms](http://www.w3.org/TR/css3-3d-transforms/) has been public for over a year now, but at the moment of writing this article, they are only supported by Safari, which includes Safari on the desktop and Mobile Safari on iOS devices. Support on other browsers varies. WebKit-cousin Chrome  currently accepts 3D transform declarations, but renders them in 2D space. Per Chrome team member Paul Irish, 3D transforms are on the roadmap, perhaps in the next couple X.0 releases. The Mozilla team has [made some initial steps](https://bugzilla.mozilla.org/show_bug.cgi?id=505115) towards implementing CSS 3D transforms. Per Mike Taylor, the Opera team is keeping a close on CSS transforms, and is waiting until the spec is fleshed out. Internet Explorer still needs to catch up to 2D transforms before we can talk about 3D.

The third dimension of the web isn't limited to just CSS transforms. Flash has built in support for years. Looking at the HTML5 canvas, `3D can be achieved now with three.js, and eventually WebGL (Mozilla is charging the lead).`

Given the sparse support for 3D transforms, you can choose to ignore them, or (with a [tip of the fedora to Mr. Andy Clarke](http://hardboiledwebdesign.com/)) you can get hard-boiled and start designing with the best features out there.




`backface-visibility`

`transforming for returning to 0 on the z axis`

`perspective`

`perspective inheritance`

`transform-origin`

`transition end events`

`hardware-acceleration` 





